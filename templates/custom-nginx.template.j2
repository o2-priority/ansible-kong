# ---------------------
# custom_nginx.template
# ---------------------

worker_processes {{ '${{' }}NGINX_WORKER_PROCESSES}};
daemon {{ '${{' }}NGINX_DAEMON}};

pid pids/nginx.pid;
error_log logs/error.log {{ '${{' }}LOG_LEVEL}};

> if nginx_optimizations then
worker_rlimit_nofile {{ '${{' }}WORKER_RLIMIT}};
> end

events {
> if nginx_optimizations then
    worker_connections {{ kong_nginx_worker_connections }};
    multi_accept on;
> end
}

http {
{% if kong_nginx_json_log_format_enable|bool|default(false) %}
{# NOTE: remember to set kong_proxy_access_log to "logs/access.log custom_json" #}
    log_format custom_json  '{ "@timestamp": "$time_iso8601", '
                            '"@fields": { '
                            '"remote_addr": "$remote_addr", '
                            '"remote_user": "$remote_user", '
                            '"body_bytes_sent": "$body_bytes_sent", '
                            '"request_time": "$request_time", '
                            '"status": "$status", '
                            '"request": "$request", '
                            '"request_method": "$request_method", '
                            '"http_referrer": "$http_referer", '
                            '"http_user_agent": "$http_user_agent", '
{% for field in kong_nginx_custom_log_fields %}
                            '"{{ field }}": "${{ field }}", '
{% endfor %}
                            '"http_user_agent": "$http_user_agent" } }';

{% elif kong_nginx_custom_log_fields|default([]) %}
{# NOTE: remember to set kong_proxy_access_log to "logs/access.log custom" #}
    log_format  custom  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        '${{ kong_nginx_custom_log_fields|join(" $") }}';
{% endif %}

{% set default_headers = [ 'Host', 'X-Real-IP', 'X-Forwarded-For', 'X-Forwarded-Proto' ] %}
{% for header,value in kong_proxy_set_headers|dictsort %}
{% if header not in default_headers %}
    proxy_set_header {{ header }} {{ value }};
{% endif %}
{% endfor %}

{% if kong_nginx_custom_configs %}
    {{ kong_nginx_custom_configs|join('\n    ') }}
{% endif %}

server {
  server_name kong;
  listen 0.0.0.0:8000;
  error_page 400 404 408 411 412 413 414 417 494 /kong_error_handler;
  error_page 500 502 503 504 /kong_error_handler;
  access_log /data/kong/logs/access.log custom_json;
  error_log /data/kong/logs/error.log error;
  client_body_buffer_size 8k;
  real_ip_header   X-Real-IP;
  real_ip_recursive off;
  set_real_ip_from  0.0.0.0/0;
  set_real_ip_from  ::/0;
  location / {
    set $upstream_host        ‘’;
    set $upstream_upgrade      ‘’;
    set $upstream_connection     ‘’;
    set $upstream_scheme       ‘’;
    set $upstream_uri        ‘’;
    set $upstream_x_forwarded_for  ‘’;
    set $upstream_x_forwarded_proto ‘’;
    set $upstream_x_forwarded_host  ‘’;
    set $upstream_x_forwarded_port  ‘’;
    rewrite_by_lua_block {
      kong.rewrite()
    }
    access_by_lua_block {
      kong.access()
    }
    proxy_http_version 1.1;
    proxy_set_header  Host       $upstream_host;
    proxy_set_header  Upgrade      $upstream_upgrade;
    proxy_set_header  Connection    $upstream_connection;
    proxy_set_header  X-Forwarded-For  $upstream_x_forwarded_for;
    proxy_set_header  X-Forwarded-Proto $upstream_x_forwarded_proto;
    proxy_set_header  X-Forwarded-Host $upstream_x_forwarded_host;
    proxy_set_header  X-Forwarded-Port $upstream_x_forwarded_port;
    proxy_set_header  X-Real-IP     $remote_addr;
    proxy_pass_header Server;
    proxy_pass_header Date;
    proxy_ssl_name   $upstream_host;
    proxy_pass     $upstream_scheme://kong_upstream$upstream_uri;
    header_filter_by_lua_block {
      kong.header_filter()
    }
    body_filter_by_lua_block {
      kong.body_filter()
    }
    log_by_lua_block {
      kong.log()
    }
  }
location /nginx_status {
    stub_status on;
    allow {{ nat_IP }};
    deny all;
  }
  location = /kong_error_handler {
    internal;
    content_by_lua_block {
      kong.handle_error()
    }
  }
}

    include 'nginx-kong.conf';
}
